generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id         Int               @id @unique @default(autoincrement())
  email           String            @unique
  full_name       String?
  photo_url       String?
  password_hash   String?
  auth_providers  auth_provider?
  templates       template[]
  conversations   conversation[]
  ratings         rating[]
  chatgpt_api_key chatgpt_api_key[]

  @@map("user")
}

model auth_provider {
  provider_id       Int           @id @unique @default(autoincrement())
  provider_user_id  String        @unique
  provider_names_id Int
  user_id           Int           @unique
  user              user          @relation(fields: [user_id], references: [user_id])
  provider_names    provider_name @relation(fields: [provider_names_id], references: [provider_names_id])

  @@map("auth_provider")
}

model provider_name {
  provider_names_id Int             @id @unique @default(autoincrement())
  name              String          @unique
  auth_providers    auth_provider[]

  @@map("provider_name")
}

model category {
  category_id                    Int                              @id @unique @default(autoincrement())
  name                           String                           @unique
  categories_on_template         categories_on_template[]
  categories_on_template_history categories_on_template_history[]

  @@map("category")
}

model template_history {
  template_history_id            Int                              @id @unique @default(autoincrement())
  name                           String
  description                    String                           @db.Text
  prompt                         String                           @db.Text
  logo_url                       String                           @db.Text
  visibility                     visibility
  variables                      variable[]
  categories_on_template_history categories_on_template_history[]
  conversations                  conversation[]
  created_at                     DateTime                         @default(now())
  template                       template                         @relation(fields: [template_id], references: [template_id])
  template_id                    Int

  @@map("template_history")
}

model template {
  template_id            Int                      @id @unique @default(autoincrement())
  slug                   String                   @unique @default(uuid())
  user                   user                     @relation(fields: [user_id], references: [user_id])
  user_id                Int
  logo_url               String                   @db.Text
  name                   String
  description            String                   @db.Text
  prompt                 String                   @db.Text
  visibility             visibility               @default(PRIVATE)
  variables              variable[]
  categories_on_template categories_on_template[]
  ratings                rating[]
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  template_history       template_history[]

  @@map("template")
}

model variable {
  variable_id         Int               @id @unique @default(autoincrement())
  name                String            @db.Text
  value               String            @db.Text
  placeholder         String            @db.Text
  tip                 String            @db.Text
  template            template?         @relation(fields: [template_id], references: [template_id])
  template_id         Int?
  type                variable_type     @default(STRING)
  variable_values     variable_value[]
  template_history    template_history? @relation(fields: [template_history_id], references: [template_history_id])
  template_history_id Int?

  @@map("variable")
}

model categories_on_template {
  category    category @relation(fields: [category_id], references: [category_id])
  category_id Int
  template    template @relation(fields: [template_id], references: [template_id])
  template_id Int

  @@id([template_id, category_id])
  @@map("categories_on_template")
}

model categories_on_template_history {
  template_history    template_history? @relation(fields: [template_history_id], references: [template_history_id])
  template_history_id Int
  category            category          @relation(fields: [category_id], references: [category_id])
  category_id         Int

  @@id([template_history_id, category_id])
  @@map("categories_on_template_history")
}

model conversation {
  conversation_id     Int              @id @unique @default(autoincrement())
  template_history    template_history @relation(fields: [template_history_id], references: [template_history_id])
  template_history_id Int
  user                user             @relation(fields: [user_id], references: [user_id])
  user_id             Int
  variables           variable_value[]
  timestamp           DateTime         @default(now())
  feedback            feedback?
  messages            message[]

  @@map("conversation")
}

model message {
  message_id         Int             @id @unique @default(autoincrement())
  conversation       conversation    @relation(fields: [conversation_id], references: [conversation_id])
  conversation_id    Int
  chatgpt_api_key    chatgpt_api_key @relation(fields: [chatgpt_api_key_id], references: [chatgpt_api_key_id])
  chatgpt_api_key_id Int
  message            String
  response           String?
  message_timestamp  DateTime        @default(now())
  response_timestamp DateTime?

  @@map("message")
}

model variable_value {
  variable_value_id Int          @id @unique @default(autoincrement())
  conversation      conversation @relation(fields: [conversation_id], references: [conversation_id])
  conversation_id   Int
  variable          variable     @relation(fields: [variable_id], references: [variable_id])
  variable_id       Int
  value             String

  @@map("variable_value")
}

model feedback {
  feedback_id     Int           @id @unique @default(autoincrement())
  conversation    conversation  @relation(fields: [conversation_id], references: [conversation_id])
  conversation_id Int           @unique
  type            feedback_type
  timestamp       DateTime      @default(now())

  @@map("feedback")
}

model rating {
  rating_id           Int      @id @unique @default(autoincrement())
  template_history_id Int
  user                user     @relation(fields: [user_id], references: [user_id])
  user_id             Int
  rating              Int
  timestamp           DateTime @default(now())
  template            template @relation(fields: [template_id], references: [template_id])
  template_id         Int

  @@map("rating")
}

model chatgpt_api_key {
  chatgpt_api_key_id Int       @id @unique @default(autoincrement())
  user               user      @relation(fields: [user_id], references: [user_id])
  user_id            Int
  api_key            String    @unique
  name               String
  created_at         DateTime  @default(now())
  messages           message[]

  @@map("chatgpt_api_key")
}

enum feedback_type {
  POSITIVE
  NEGATIVE
}

enum variable_type {
  STRING
  TEXT
}

enum visibility {
  PUBLIC
  PRIVATE
  NOT_LISTED
}
